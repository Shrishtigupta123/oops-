{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPwAJToVL9Uxzz/E6lz6Ple"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["1. What is Object-Oriented Programming (OOP)?\n","Object -Oriented Programming (OOP) is a programming paradigm that revolves around the concept of objects and classes. it's a way of designing and organizing code to simulate real-world objects and systems ."],"metadata":{"id":"DJi581-begYV"}},{"cell_type":"markdown","source":["2. What is a class in OOP?\n","A Blueprint or template that defines the properties and behavior of an object ."],"metadata":{"id":"d-0-Y8lDemhQ"}},{"cell_type":"markdown","source":["3. What is an object in OOP?\n","An instance of a class, with its own set of attributes(data)and Methods (fuctions)"],"metadata":{"id":"RtoTjXR5e0Gv"}},{"cell_type":"markdown","source":["4. What is the difference between abstraction and encapsulation?\n","1. Purpose: Abstraction is about hiding internal details, while encapsulation is about bundling data and methods.\n","2. Scope: Abstraction is about exposing essential features, while encapsulation is about controlling access to data.\n","3. Focus: Abstraction focuses on the interface, while encapsulation focuses on the implementation.\n","\n","In summary, abstraction is about showing the necessary information while hiding the internal details, whereas encapsulation is about bundling data and methods to control access and modification.\n"],"metadata":{"id":"CD2Leoi0fExG"}},{"cell_type":"markdown","source":["5. What are dunder methods in Python?\n","In Python, \"dunder\" methods, also known as \"magic\" or \"special\" methods, are special methods that are surrounded by double underscores (i.e., __) on either side of the method name. These methods are not intended to be invoked directly, but rather are called by Python's interpreter in specific situations.\n"],"metadata":{"id":"KdlRawZQfUxj"}},{"cell_type":"markdown","source":["6. Explain the concept of inheritance in OOP?\n","Inheritance is a fundamental concept in Object-Oriented Programming (OOP) that allows one class to inherit the properties and behavior of another class.\n","\n","Key Concepts:\n","\n","1. Parent Class (also known as Superclass or Base Class): The class from which the child class inherits.\n","2. Child Class (also known as Subclass or Derived Class): The class that inherits from the parent class.\n","3. Inheritance: The process of creating a new class based on an existing class."],"metadata":{"id":"EAMXtwDTfc51"}},{"cell_type":"markdown","source":["7. What is polymorphism in OOP?\n","Polymorphism is a fundamental concept in Object-Oriented Programming (OOP) that allows objects of different classes to be treated as objects of a common superclass. This enables objects to take on multiple forms, depending on the context in which they are used.\n"],"metadata":{"id":"fJ39KZJ0flwt"}},{"cell_type":"markdown","source":["8. How is encapsulation achieved in Python?\n","Encapsulation is a fundamental concept in object-oriented programming (OOP) that binds together the data and the methods that manipulate that data. In Python, encapsulation is achieved using classes and objects.\n","\n","Using Classes and Objects\n","\n","In Python, a class is a blueprint for creating objects. A class defines the properties and behavior of an object. The data (attributes) and methods that manipulate that data are defined inside the class.\n"],"metadata":{"id":"Co1d7ppcfpQa"}},{"cell_type":"code","source":["class BankAccount:\n","    def __init__(self, account_number, balance):\n","        self.__account_number = account_number\n","        self.__balance = balance\n","\n","    def get_account_number(self):\n","        return self.__account_number\n","\n","    def get_balance(self):\n","        return self.__balance\n","\n","    def deposit(self, amount):\n","        self.__balance += amount\n","\n","    def withdraw(self, amount):\n","        if amount > self.__balance:\n","            print(\"Insufficient funds\")\n","        else:\n","            self.__balance -= amount\n","\n","account = BankAccount(\"1234567890\", 1000.0)\n","print(account.get_account_number())\n","print(account.get_balance())\n","account.deposit(500.0)\n","print(account.get_balance())\n","account.withdraw(200.0)\n","print(account.get_balance())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XD8Qrdu-odkX","executionInfo":{"status":"ok","timestamp":1734925763816,"user_tz":480,"elapsed":626,"user":{"displayName":"Shrishti Gupta","userId":"17842323092412354303"}},"outputId":"76496e72-6e65-45b1-d3f1-322a193c75ac"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1234567890\n","1000.0\n","1500.0\n","1300.0\n"]}]},{"cell_type":"markdown","source":["9. What is a constructor in Python?\n","In Python, a constructor is a special method that is automatically called when an object of a class is created. The constructor is used to initialize the attributes of the class.\n","\n","Syntax\n","\n","\n","class ClassName:\n","    def __init__(self, parameter1, parameter2, ...):\n","        # initialization code\n","Key Points\n","\n","1. The constructor method is always named __init__.\n","2. The __init__ method is called when an object of the class is created.\n","3. The __init__ method is used to initialize the attributes of the class.\n","4. The __init__ method can take parameters, which are used to initialize the attributes of the class.\n","\n"],"metadata":{"id":"D-KE7qycfwna"}},{"cell_type":"markdown","source":["10. What are class and static methods in Python?\n","Class Methods\n","\n","A class method is a method that is bound to the class rather than the instance of the class. It can access or modify the class state, i.e., the class variables. A class method is defined using the @classmethod decorator.\n","\n","Static Methods\n","\n","A static method is a method that belongs to a class rather than an instance of the class. It can't access or modify the class state or instance state. A static method is defined using the @staticmethod decorator.\n"],"metadata":{"id":"72KWKAZCf2mq"}},{"cell_type":"code","source":["class Person:    # Class Method\n","    count = 0\n","\n","    def __init__(self, name):\n","        self.name = name\n","        Person.count += 1\n","\n","    @classmethod\n","    def get_count(cls):\n","        return cls.count\n","\n","person1 = Person(\"John\")\n","person2 = Person(\"Jane\")\n","\n","print(Person.get_count())  # Output: 2\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WYRz_n2apkig","executionInfo":{"status":"ok","timestamp":1734926033743,"user_tz":480,"elapsed":598,"user":{"displayName":"Shrishti Gupta","userId":"17842323092412354303"}},"outputId":"f31c22a5-2719-43e6-b7d2-11890a138566"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2\n"]}]},{"cell_type":"code","source":["class MathOperations:\n","\n","    @staticmethod\n","    def add(x, y):\n","        return x + y\n","\n","    @staticmethod\n","    def multiply(x, y):\n","        return x * y\n","\n","         #Calling static methods without creating an instance of the class\n","result_add = MathOperations.add(5, 3)\n","result_multiply = MathOperations.multiply(5, 3)\n","\n","print(\"Addition Result:\", result_add)        # Output: 8\n","print(\"Multiplication Result:\", result_multiply)  # Output: 15"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZKCUJ_O6qPYp","executionInfo":{"status":"ok","timestamp":1734926246194,"user_tz":480,"elapsed":881,"user":{"displayName":"Shrishti Gupta","userId":"17842323092412354303"}},"outputId":"2929d9d4-add8-4b4a-814d-069149694957"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Addition Result: 8\n","Multiplication Result: 15\n"]}]},{"cell_type":"markdown","source":["11. What is method overloading in Python?\n","Method overloading in Python refers to the ability to define multiple methods with the same name but different parameters (i.e., different numbers or types of arguments). However, Python does not natively support method overloading in the same way that languages like Java or C++ do. In Python, if you define a method multiple times with the same name, the last definition will overwrite the previous ones.\n","Achieving Method Overloading in Python\n","While Python does not support traditional method overloading, you can achieve similar behavior using default arguments, variable-length argument lists (*args, **kwargs), or by manually checking the number and type of arguments in the method."],"metadata":{"id":"aZxLHGE6f8SR"}},{"cell_type":"markdown","source":["12. What is method overriding in OOP?\n","answ->Method overriding is a concept in Object-Oriented Programming (OOP) where a subclass provides a specific implementation for a method that is already defined in its superclass. The subclass method overrides the parent class method with the same name and signature (same parameters). When the method is called on an object of the subclass, the subclass's version of the method is executed, not the superclass's version.\n","\n","Key Characteristics of Method Overriding:\n","\n","The method in the subclass must have the same name and signature (same parameters) as the method in the parent class.\n","\n","The subclass method replaces or modifies the behavior of the parent class method.\n","\n","Method overriding allows the subclass to provide a more specific implementation of the method, while the parent class provides a general one.\n","\n","In Python, method overriding does not require any special syntax (besides redefining the method in the subclass)."],"metadata":{"id":"aOEHizZMgEUm"}},{"cell_type":"markdown","source":["13. What is a property decorator in Python?\n","In Python, the property decorator is used to define a method as a getter for a property. This allows you to access an attribute like it’s a regular attribute, but behind the scenes, the method logic is executed. It provides a way to define a read-only property or a property that uses custom logic to get and set the value of an attribute.\n","\n","Key Features of the property Decorator:\n","\n","It allows you to encapsulate an attribute in a class, enabling custom logic to execute when the attribute is accessed or modified.\n","\n","You can define a getter, setter, and deleter for an attribute, and the property decorator manages how these methods are accessed.\n","\n","It allows you to access a method like an attribute without explicitly calling it like a function.\n","\n","Syntax of Property Decorator:\n","\n","You can define a property by using the @property decorator. You can then define setter and deleter methods for the same attribute using @<property_name>.setter and @<property_name>.deleter."],"metadata":{"id":"Z1rBBTXlgHgd"}},{"cell_type":"markdown","source":["14. Why is polymorphism important in OOP?\n","answ->Polymorphism is one of the key concepts in Object-Oriented Programming (OOP), and it plays a crucial role in making your code more flexible, reusable, and easier to maintain. The term \"polymorphism\" comes from Greek, meaning \"many shapes,\" and in OOP, it refers to the ability of different classes to provide a common interface for their methods, allowing objects of different types to be treated as objects of a common superclass.\n","\n","Why is Polymorphism Important in OOP?\n","\n","1.Code Reusability: Polymorphism allows the same method or function to work with objects of different classes. This enables you to write generic code that works with any class that implements a specific method. Instead of writing separate methods for each class, polymorphism allows a common method to be reused across various classes.\n","\n","Example: You can write a method to perform an action on any object that has a common method signature (e.g., speak() for animals like dogs, cats, etc.), and this method will work with any subclass without modification.\n","\n","2.Flexibility and Extensibility: With polymorphism, you can add new classes and objects to your program without changing the existing code that uses polymorphism. As long as the new class adheres to the same interface or base class as the existing ones, you can use the new class without altering the functionality of other parts of the program.\n","\n","Example: You can add new types of animals (e.g., Bird, Lion) that implement the speak() method, and the code that interacts with animals will work seamlessly with the new classes, without the need for modification.\n","Why Use Property Decorators?\n","\n","Encapsulation: Properties allow you to hide the internal state (e.g., the actual storage of an attribute) and provide controlled access to it. You can add custom behavior when getting, setting, or deleting an attribute.\n","\n","Read-Only Attributes: You can define an attribute that can be read but not modified by the outside world. For instance, the area property is a read-only property based on radius.\n","\n","15.what is an abstract class in Python?\n","answ->An abstract class in Python is a class that cannot be instantiated directly and is designed to be subclassed by other classes. It serves as a blueprint for other classes, providing a common interface and possibly some shared functionality, but leaving some methods to be implemented by subclasses.\n","\n","In Python, abstract classes are defined using the abc (Abstract Base Class) module, which provides the ABC class and the abstractmethod decorator. An abstract class can have both abstract methods (which must be implemented by subclasses) and non-abstract methods (which can provide default behavior).\n","\n","Key Points:\n","\n","Abstract Methods: Methods that are declared in an abstract class but contain no implementation. Subclasses must implement these methods.\n","\n","Cannot Instantiate: You cannot create instances of an abstract class directly.\n","\n","Syntax:\n","\n","ABC is the base class for all abstract classes.\n","\n","@abstractmethod decorator is used to mark methods as abstract."],"metadata":{"id":"D8Kqskh8gQf2"}},{"cell_type":"markdown","source":[],"metadata":{"id":"qPOovfdegV6x"}},{"cell_type":"markdown","source":["16. What are the advantages of OOP?\n","Advantage\tBenefit\n","Modularity\tEasier to develop, test, and maintain software.\n","Reusability\tReduces code duplication, saves development time.\n","Scalability\tEasier to scale and maintain large applications.\n","Encapsulation\tProtects the integrity of data by restricting direct access.\n","Abstraction\tSimplifies the interface and reduces system complexity.\n","Inheritance\tPromotes code reuse and establishes relationships between classes.\n","Polymorphism\tIncreases flexibility and reduces the need for duplicate code.\n","Easier Debugging\tEasier to identify, fix, and test errors.\n","Real-World Modeling\tModels real-world concepts, making it easier to understand.\n","Data Security\tPrevents unintended access or modification of sensitive data.\n","In conclusion, OOP provides a powerful way to structure and organize your code, making it easier to manage, extend, and maintain, especially as the software grows in complexity.\n","\n","\n","\n","\n","\n","\n","\n"],"metadata":{"id":"Fh93c5LtgbY1"}},{"cell_type":"markdown","source":["17. What is the difference between a class variable and an instance variable?\n","In Python, class variables and instance variables are both used to store data associated with classes and objects. However, they have different purposes, scopes, and behaviors.\n","\n","1.Class Variable:\n","\n","Definition: A class variable is a variable that is shared by all instances of the class. It is defined within the class but outside of any methods, typically at the top of the class.\n","\n","Scope: It belongs to the class itself, and all instances of the class share the same value for the class variable. Any change to the class variable affects all instances.\n","\n","Access: Class variables can be accessed using the class name (ClassName.variable) or through an instance (instance.variable), but it is typically accessed via the class name to emphasize that it is shared by all instances.\n","\n","2.Instance Variable:\n","\n","Definition: An instance variable is a variable that is unique to each instance (object) of the class. It is usually defined within the init method, using self to bind the variable to the particular object.\n","\n","Scope: It is tied to a specific instance of the class. Each instance of the class can have different values for instance variables.\n","\n","Access: Instance variables are accessed via the object (instance) itself, i.e., instance.variable"],"metadata":{"id":"8_TPrWKVghBF"}},{"cell_type":"markdown","source":["18.What is multiple inheritance in Python?\n","answ->Multiple inheritance in Python is a feature that allows a class to inherit from more than one class. This means that a child class can inherit attributes and methods from multiple parent classes. It enables the child class to access the functionality of all its parent classes, promoting code reuse.\n","\n","Key Points about Multiple Inheritance:\n","\n","A class can inherit from multiple parent classes, allowing it to combine the behavior of several classes. In case of method name conflicts (i.e., when two parent classes have methods with the same name), Python follows the Method Resolution Order (MRO) to decide which method to call.\n","\n","Method Resolution Order (MRO): When using multiple inheritance, the method resolution order (MRO) determines the order in which methods are inherited from the parent classes. Python uses the C3 linearization algorithm to determine the MRO. You can inspect the MRO using the mro() method."],"metadata":{"id":"O0uriNbOgncs"}},{"cell_type":"markdown","source":["19.Explain the purpose of ‘’__str__’ and ‘__repr__’ ‘ methods in Python?\n","answ->In Python, both str() and repr() are special methods used to define the string representations of objects. These methods control how objects are represented as strings, but they serve different purposes.\n","\n","1.str() Method:\n","\n","Purpose: The str() method is used to define the \"informal\" or \"user-friendly\" string representation of an object. When you print an object or use str(object), Python calls the str() method to generate a human-readable string representation of the object.\n","\n","Use Case: This method should return a string that is easy to understand for the user, typically in the form of a summary or description of the object.\n","\n","repr() Method:\n","Use Case: This method should return a string that provides a more detailed or precise representation of the object, ideally in the form of code that could be used to recreate the object using eval()."],"metadata":{"id":"eKcxagvNgwV4"}},{"cell_type":"markdown","source":["20.What is the significance of the ‘super()’ function in Python?\n","The super() function in Python is used to call methods from a parent class (or superclass) in a child class. It provides a way to access methods and attributes of a parent class without explicitly naming the parent class. This is especially useful in the context of inheritance and method overriding.\n","\n","Key Purposes of super():\n","\n","Calling Parent Class Methods: It allows you to call methods from the parent class in a child class, especially when you override methods in the child class.\n","\n","Method Resolution Order (MRO): It helps ensure that methods from multiple inheritance are called in the correct order by Python’s method resolution order (MRO).\n","\n","Avoiding Direct Parent Class References: Using super() makes the code more maintainable and flexible, as you don't have to hardcode the parent class name. This is particularly helpful when dealing with multiple inheritance.\n","\n","Accessing Parent Class Constructor: You can use super() to call the parent class's init()"],"metadata":{"id":"mjgkdTThg3Lf"}},{"cell_type":"markdown","source":["21.What is the significance of the __del__ method in Python?\n","The del() method in Python is a special method, often referred to as the destructor. It is automatically called when an object is about to be destroyed, i.e., when it is garbage collected. The del() method is used to perform any final cleanup or resource release that may be necessary before the object is removed from memory.\n","\n","Purpose and Significance of del():\n","\n","Resource Cleanup: It allows you to release resources (such as closing files, network connections, or database connections) when an object is no longer needed.\n","\n","Automatic Garbage Collection: Python uses automatic garbage collection to manage memory, and del() is called when an object’s reference count reaches zero. This is usually triggered when an object goes out\n","\n","Key Points:\n","\n","Automatic Invocation: You generally do not call del() directly. It is automatically called when the object is about to be destroyed.\n","\n","Garbage Collection: Python's garbage collector handles memory management, and del() is invoked when the object's reference count drops to zero."],"metadata":{"id":"llqAOx5eg8UT"}},{"cell_type":"markdown","source":["22. What is the difference between @staticmethod and @classmethod in Python?\n","In Python, both @staticmethod and @classmethod are used to define methods that belong to a class rather than to an instance. However, they have key differences in how they work and what they are used for. Here's a breakdown of the differences:\n","\n","1.@staticmethod:\n","\n","Purpose: A @staticmethod is a method that does not require access to the instance (self) or the class (cls). It behaves like a regular function but is part of the class's namespace.\n","\n","Use Case: Use a static method when you want to define a function that belongs to the class but doesn't need access to the instance or class attributes.\n","\n","Access: A static method does not have access to the instance (self) or the class (cls) attributes. It only takes the parameters you pass to it.\n","\n","2.@classmethod:\n","\n","Purpose: A @classmethod is a method that takes the class itself (cls) as the first argument, allowing it to modify or access class-level attributes and methods. Unlike static methods, class methods can access and modify class-level data.\n","\n","Use Case: Use a class method when you need to work with the class itself, such as modifying class attributes or creating alternative constructors.\n","\n","Access: A class method has access to the class (cls), but not to instance-level attributes (self)."],"metadata":{"id":"dxMXNFDMhCmZ"}},{"cell_type":"markdown","source":["23.How does polymorphism work in Python with inheritance?\n","Polymorphism in Python, especially in the context of inheritance, refers to the ability of different classes to provide different implementations of the same method, allowing objects of different classes to be treated as instances of a common superclass. In Python, polymorphism allows you to call methods on objects of different types (derived from a common base class), and each type can have its own implementation of the method.\n","\n","Key Concepts of Polymorphism in Python:\n","\n","Method Overriding: Polymorphism is often implemented through method overriding, where a method in the child class has the same name as a method in the parent class but provides a different behavior.\n","\n","Dynamic Dispatch: In Python, the appropriate method is chosen at runtime based on the object’s type (this is known as dynamic method dispatch).\n","\n","Polymorphism Through Inheritance and Method Overriding: Polymorphism allows us to write more flexible and reusable code. For instance, if you have a function that processes a collection of animals (which could be dogs, cats, or other subclasses of Animal), the same function can work with all types of animals, but each animal will \"speak\" in its own way.\n","\n","Example with a List of Objects:\n","\n","Parent class\n","class Animal: def speak(self): print(\"Animal speaks\")\n","\n","Child classes\n","class Dog(Animal): def speak(self): print(\"Dog barks\")\n","\n","class Cat(Animal): def speak(self): print(\"Cat meows\")\n","\n","A list of different animal objects\n","animals = [Dog(), Cat(), Dog()]\n","\n","Polymorphism in action\n","for animal in animals: animal.speak()"],"metadata":{"id":"Gmzs2f3NhHoE"}},{"cell_type":"markdown","source":["24. What is method chaining in Python OOP?\n","Method chaining in Python Object-Oriented Programming (OOP) is a technique where multiple methods are called on the same object in a single line. It is achieved by designing methods in such a way that they return the object itself (commonly self). This enables subsequent method calls to be chained together, leading to cleaner and more readable code.\n","\n","Key Features of Method Chaining\n","\n","Returns the Object: Each method in the chain returns the object (typically self) so the next method can be called on the same object. Fluent Interface: Provides a smooth and intuitive way of interacting with objects, often seen in builder patterns or query-building frameworks. Enhanced Readability: Consolidates multiple method calls into a single expression, reducing clutter."],"metadata":{"id":"31SXOrajhNCz"}},{"cell_type":"markdown","source":["25. What is the purpose of the __call__ method in Python?\n","The call method in Python is a special method that allows an instance of a class to be called as if it were a function. When you use parentheses () after an object of a class, the call method is automatically triggered.\n","\n","Purpose of the call Method Make Objects Callable:\n","\n","The primary purpose is to allow objects to behave like functions, enabling a more flexible and intuitive interface. Encapsulation of Behavior:\n","\n","It allows you to encapsulate functionality or logic inside a class, which can be triggered when the object is called. Dynamic Execution:\n","\n","It enables objects to execute specific logic dynamically based on their internal state or input. Cleaner Syntax:\n","\n","Simplifies code by allowing callable objects instead of explicitly invoking a specific method.\n","\n","Example of call\n","\n","class Multiplier:\n","\n","def __init__(self, factor):\n","    self.factor = factor\n","\n","def __call__(self, number):\n","    return number * self.factor\n","Creating an instance of the class\n","multiply_by_3 = Multiplier(3)\n","\n","Using the instance as a callable\n","result = multiply_by_3(10) # Equivalent to multiply_by_3.call(10) print(result) # Output: 30"],"metadata":{"id":"xJDjuY2ihT7D"}},{"cell_type":"code","source":["#Practical Questions\n","\n","#1. Create a parent class Animal with a method speak() that prints a generic message. Create a child class Dog that overrides the speak() method to print \"Bark!\".\n","\n","#Parent class\n","class Animal:\n","    def speak(self):\n","        print(\"This is a generic animal sound.\")\n","\n","# Child class\n","class Dog(Animal):\n","    def speak(self):\n","        print(\"Bark!\")\n","\n","# Testing the classes\n","animal = Animal()\n","animal.speak()  # Output: This is a generic animal sound.\n","\n","dog = Dog()\n","dog.speak()  # Output: Bark!\n"],"metadata":{"id":"n5Amjyfshb-p","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735926596063,"user_tz":480,"elapsed":495,"user":{"displayName":"Shrishti Gupta","userId":"17842323092412354303"}},"outputId":"a1007989-f4f2-4c83-a390-b6978d46a30a"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["This is a generic animal sound.\n","Bark!\n"]}]},{"cell_type":"code","source":["#2. Write a program to create an abstract class Shape with a method area(). Derive classes Circle and Rectangle from it and implement the area() method in both.\n","from abc import ABC, abstractmethod\n","import math\n","\n","# Abstract class\n","class Shape(ABC):\n","    @abstractmethod\n","    def area(self):\n","        pass\n","\n","# Derived class for Circle\n","class Circle(Shape):\n","    def __init__(self, radius):\n","        self.radius = radius\n","\n","    def area(self):\n","        return math.pi * (self.radius ** 2)\n","\n","# Derived class for Rectangle\n","class Rectangle(Shape):\n","    def __init__(self, length, width):\n","        self.length = length\n","        self.width = width\n","\n","    def area(self):\n","        return self.length * self.width\n","\n","# Testing the implementation\n","circle = Circle(5)  # Circle with radius 5\n","rectangle = Rectangle(4, 6)  # Rectangle with length 4 and width 6\n","\n","print(f\"Area of Circle: {circle.area():.2f}\")  # Output: Area of Circle: 78.54\n","print(f\"Area of Rectangle: {rectangle.area()}\")  # Output: Area of Rectangle: 24"],"metadata":{"id":"z6ajGWL3hwt2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735926646257,"user_tz":480,"elapsed":465,"user":{"displayName":"Shrishti Gupta","userId":"17842323092412354303"}},"outputId":"954ca72a-d24d-42f9-e869-6dfaae11adb4"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Area of Circle: 78.54\n","Area of Rectangle: 24\n"]}]},{"cell_type":"code","source":["#3. Implement a multi-level inheritance scenario where a class Vehicle has an attribute type. Derive a class Car and further derive a class ElectricCar that adds a battery attribute.\n","# Base class\n","class Vehicle:\n","    def __init__(self, vehicle_type):\n","        self.vehicle_type = vehicle_type\n","\n","    def display_type(self):\n","        print(f\"Vehicle type: {self.vehicle_type}\")\n","\n","# Intermediate class\n","class Car(Vehicle):\n","    def __init__(self, vehicle_type, brand):\n","        super().__init__(vehicle_type)\n","        self.brand = brand\n","\n","    def display_car_details(self):\n","        print(f\"Car brand: {self.brand}\")\n","\n","# Derived class\n","class ElectricCar(Car):\n","    def __init__(self, vehicle_type, brand, battery_capacity):\n","        super().__init__(vehicle_type, brand)\n","        self.battery_capacity = battery_capacity\n","\n","    def display_electric_car_details(self):\n","        print(f\"Battery capacity: {self.battery_capacity} kWh\")\n","\n","# Testing the multi-level inheritance\n","vehicle = Vehicle(\"General\")\n","vehicle.display_type()  # Output: Vehicle type: General\n","\n","car = Car(\"Car\", \"Toyota\")\n","car.display_type()  # Output: Vehicle type: Car\n","car.display_car_details()  # Output: Car brand: Toyota\n","\n","electric_car = ElectricCar(\"Electric Car\", \"Tesla\", 75)\n","electric_car.display_type()  # Output: Vehicle type: Electric Car\n","electric_car.display_car_details()  # Output: Car brand: Tesla\n","electric_car.display_electric_car_details()  # Output: Battery capacity: 75 kWh\n"],"metadata":{"id":"g9r3HmDZh7Yz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735926682182,"user_tz":480,"elapsed":471,"user":{"displayName":"Shrishti Gupta","userId":"17842323092412354303"}},"outputId":"6d9fe76b-11fc-4e94-f893-1273e5e28dbf"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Vehicle type: General\n","Vehicle type: Car\n","Car brand: Toyota\n","Vehicle type: Electric Car\n","Car brand: Tesla\n","Battery capacity: 75 kWh\n"]}]},{"cell_type":"code","source":["#4. Implement a multi-level inheritance scenario where a class Vehicle has an attribute type. Derive a class Car and further derive a class ElectricCar that adds a battery attribute.\n","# Base class\n","class Vehicle:\n","    def __init__(self, vehicle_type):\n","        self.vehicle_type = vehicle_type\n","\n","    def display_type(self):\n","        print(f\"Vehicle type: {self.vehicle_type}\")\n","\n","# Intermediate class\n","class Car(Vehicle):\n","    def __init__(self, vehicle_type, brand):\n","        super().__init__(vehicle_type)\n","        self.brand = brand\n","\n","    def display_car_details(self):\n","        print(f\"Car brand: {self.brand}\")\n","\n","# Derived class\n","class ElectricCar(Car):\n","    def __init__(self, vehicle_type, brand, battery_capacity):\n","        super().__init__(vehicle_type, brand)\n","        self.battery_capacity = battery_capacity\n","\n","    def display_electric_car_details(self):\n","        print(f\"Battery capacity: {self.battery_capacity} kWh\")\n","\n","# Testing the multi-level inheritance\n","# Creating a general Vehicle\n","vehicle = Vehicle(\"Transport Vehicle\")\n","vehicle.display_type()  # Output: Vehicle type: Transport Vehicle\n","\n","# Creating a Car\n","car = Car(\"Car\", \"Toyota\")\n","car.display_type()  # Output: Vehicle type: Car\n","car.display_car_details()  # Output: Car brand: Toyota\n","\n","# Creating an ElectricCar\n","electric_car = ElectricCar(\"Electric Car\", \"Tesla\", 100)\n","electric_car.display_type()  # Output: Vehicle type: Electric Car\n","electric_car.display_car_details()  # Output: Car brand: Tesla\n","electric_car.display_electric_car_details()  # Output: Battery capacity: 100 kWh\n","\n",""],"metadata":{"id":"7ZYB4RU6h-3N","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735926722536,"user_tz":480,"elapsed":478,"user":{"displayName":"Shrishti Gupta","userId":"17842323092412354303"}},"outputId":"adabd1c0-18fa-4305-a75f-b8d5d6801a00"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Vehicle type: Transport Vehicle\n","Vehicle type: Car\n","Car brand: Toyota\n","Vehicle type: Electric Car\n","Car brand: Tesla\n","Battery capacity: 100 kWh\n"]}]},{"cell_type":"code","source":["#5. Write a program to demonstrate encapsulation by creating a class BankAccount with private attributes balance and methods to deposit, withdraw, and check balance.\n","class BankAccount:\n","    def __init__(self, initial_balance=0):\n","        # Private attribute\n","        self.__balance = initial_balance\n","\n","    # Method to deposit money\n","    def deposit(self, amount):\n","        if amount > 0:\n","            self.__balance += amount\n","            print(f\"Deposited: {amount}\")\n","        else:\n","            print(\"Deposit amount must be positive.\")\n","\n","    # Method to withdraw money\n","    def withdraw(self, amount):\n","        if 0 < amount <= self.__balance:\n","            self.__balance -= amount\n","            print(f\"Withdrawn: {amount}\")\n","        elif amount > self.__balance:\n","            print(\"Insufficient balance.\")\n","        else:\n","            print(\"Withdrawal amount must be positive.\")\n","\n","    # Method to check balance\n","    def check_balance(self):\n","        print(f\"Current balance: {self.__balance}\")\n","\n","# Testing the BankAccount class\n","account = BankAccount(1000)  # Create account with an initial balance of 1000\n","account.check_balance()      # Output: Current balance: 1000\n","\n","account.deposit(500)         # Output: Deposited: 500\n","account.check_balance()      # Output: Current balance: 1500\n","\n","account.withdraw(300)        # Output: Withdrawn: 300\n","account.check_balance()      # Output: Current balance: 1200\n","\n","account.withdraw(2000)       # Output: Insufficient balance.\n","account.deposit(-100)        # Output: Deposit amount must be positive."],"metadata":{"id":"bYhiy1SxiCg0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735926764118,"user_tz":480,"elapsed":474,"user":{"displayName":"Shrishti Gupta","userId":"17842323092412354303"}},"outputId":"e1e4b8a7-d129-441e-8bf9-8dc53a56ee60"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Current balance: 1000\n","Deposited: 500\n","Current balance: 1500\n","Withdrawn: 300\n","Current balance: 1200\n","Insufficient balance.\n","Deposit amount must be positive.\n"]}]},{"cell_type":"code","source":["#6. Demonstrate runtime polymorphism using a method play() in a base class Instrument. Derive classes Guitar and Piano that implement their own version of play().\n","# Base class\n","class Instrument:\n","    def play(self):\n","        print(\"Playing an instrument.\")\n","\n","# Derived class for Guitar\n","class Guitar(Instrument):\n","    def play(self):\n","        print(\"Strumming the guitar.\")\n","\n","# Derived class for Piano\n","class Piano(Instrument):\n","    def play(self):\n","        print(\"Playing the piano.\")\n","\n","# Function to demonstrate runtime polymorphism\n","def play_instrument(instrument):\n","    instrument.play()\n","\n","# Testing the implementation\n","instrument = Instrument()\n","guitar = Guitar()\n","piano = Piano()\n","\n","play_instrument(instrument)  # Output: Playing an instrument.\n","play_instrument(guitar)      # Output: Strumming the guitar.\n","play_instrument(piano)       # Output: Playing the piano."],"metadata":{"id":"tOQX5ayaiF8v","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735926796196,"user_tz":480,"elapsed":445,"user":{"displayName":"Shrishti Gupta","userId":"17842323092412354303"}},"outputId":"b368844e-7c2f-4dc3-ca93-33aa3a7b4776"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Playing an instrument.\n","Strumming the guitar.\n","Playing the piano.\n"]}]},{"cell_type":"code","source":["#7. Create a class MathOperations with a class method add_numbers() to add two numbers and a static method subtract_numbers() to subtract two numbers.\n","class MathOperations:\n","    # Class method to add two numbers\n","    @classmethod\n","    def add_numbers(cls, a, b):\n","        return a + b\n","\n","    # Static method to subtract two numbers\n","    @staticmethod\n","    def subtract_numbers(a, b):\n","        return a - b\n","\n","# Testing the MathOperations class\n","result_add = MathOperations.add_numbers(10, 5)  # Using the class method\n","print(f\"Addition result: {result_add}\")         # Output: Addition result:\n","result_subtract = MathOperations.subtract_numbers(10, 5)  # Using the static method\n","print(f\"Subtraction result: {result_subtract}\")           # Output: Subtraction result: 5\n","\n",""],"metadata":{"id":"i3-5AzXjiLvu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735926913411,"user_tz":480,"elapsed":482,"user":{"displayName":"Shrishti Gupta","userId":"17842323092412354303"}},"outputId":"cb2a95b1-b735-4523-b046-59a6a99f860a"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Addition result: 15\n","Subtraction result: 5\n"]}]},{"cell_type":"code","source":["#8.Implement a class Person with a class method to count the total number of persons created.\n","class Person:\n","    # Class-level attribute to track the count of persons\n","    person_count = 0\n","\n","    def __init__(self, name):\n","        self.name = name\n","        # Increment the count whenever a new Person object is created\n","        Person.person_count += 1\n","\n","    @classmethod\n","    def get_person_count(cls):\n","        return cls.person_count\n","\n","# Testing the Person class\n","person1 = Person(\"Alice\")\n","person2 = Person(\"Bob\")\n","person3 = Person(\"Charlie\")\n","\n","print(f\"Total persons created: {Person.get_person_count()}\")  # Output: Total persons created: 3\n"],"metadata":{"id":"Tfw9VCUHiMjk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735926946778,"user_tz":480,"elapsed":469,"user":{"displayName":"Shrishti Gupta","userId":"17842323092412354303"}},"outputId":"005133cd-0041-484e-b31e-218591d146fa"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Total persons created: 3\n"]}]},{"cell_type":"code","source":["#9.Write a class Fraction with attributes numerator and denominator. Override the str method to display the fraction as \"numerator/denominator\".\n","class Fraction:\n","    def __init__(self, numerator, denominator):\n","        self.numerator = numerator\n","        self.denominator = denominator\n","\n","    def __str__(self):\n","        return f\"{self.numerator}/{self.denominator}\"\n","\n","# Testing the Fraction class\n","fraction1 = Fraction(3, 4)\n","fraction2 = Fraction(5, 8)\n","\n","print(f\"Fraction 1: {fraction1}\")  # Output: Fraction 1: 3/4\n","print(f\"Fraction 2: {fraction2}\")  # Output: Fraction 2: 5/8\n","\n"],"metadata":{"id":"JHi2nUhIiPki","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735927010651,"user_tz":480,"elapsed":477,"user":{"displayName":"Shrishti Gupta","userId":"17842323092412354303"}},"outputId":"b4bc53de-8e45-4790-efcb-89b49c47df76"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Fraction 1: 3/4\n","Fraction 2: 5/8\n"]}]},{"cell_type":"code","source":["#10.Demonstrate operator overloading by creating a class Vector and overriding the add method to add two vectors.\n","class Vector:\n","    def __init__(self, x, y):\n","        self.x = x\n","        self.y = y\n","\n","    # Overloading the '+' operator to add two vectors\n","    def __add__(self, other):\n","        if isinstance(other, Vector):\n","            return Vector(self.x + other.x, self.y + other.y)\n","        return NotImplemented\n","\n","    def __str__(self):\n","        return f\"({self.x}, {self.y})\"\n","\n","# Testing the Vector class and operator overloading\n","vector1 = Vector(2, 3)\n","vector2 = Vector(4, 5)\n","\n","# Adding two vectors using the overloaded '+' operator\n","result = vector1 + vector2\n","\n","print(f\"Vector 1: {vector1}\")  # Output: Vector 1: (2, 3)\n","print(f\"Vector 2: {vector2}\")  # Output: Vector 2: (4, 5)\n","print(f\"Result of addition: {result}\")  # Output: Result of addition: (6, 8)\n","\n","\n"],"metadata":{"id":"V6CKDfyfiXH1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735927041447,"user_tz":480,"elapsed":500,"user":{"displayName":"Shrishti Gupta","userId":"17842323092412354303"}},"outputId":"4d0c4c13-7b66-42df-806f-5e0615198a10"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Vector 1: (2, 3)\n","Vector 2: (4, 5)\n","Result of addition: (6, 8)\n"]}]},{"cell_type":"code","source":["#11. Create a class Person with attributes name and age. Add a method greet() that prints \"Hello, my name is {name} and I am {age} years old.\"\n","class Person:\n","    def __init__(self, name, age):\n","        self.name = name\n","        self.age = age\n","\n","    def greet(self):\n","        print(f\"Hello, my name is {self.name} and I am {self.age} years old.\")\n","\n","# Testing the Person class\n","person1 = Person(\"Alice\", 30)\n","person2 = Person(\"Bob\", 25)\n","\n","person1.greet()  # Output: Hello, my name is Alice and I am 30 years old.\n","person2.greet()  # Output: Hello, my name is Bob and I am 25 years old.\n"],"metadata":{"id":"51oqFhxxibkZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735927068881,"user_tz":480,"elapsed":446,"user":{"displayName":"Shrishti Gupta","userId":"17842323092412354303"}},"outputId":"b57db23e-d5b9-48a6-a72a-76001c700f07"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, my name is Alice and I am 30 years old.\n","Hello, my name is Bob and I am 25 years old.\n"]}]},{"cell_type":"code","source":["#12. Implement a class Student with attributes name and grades. Create a method average_grade() to compute the average of the grades.\n","class Student:\n","    def __init__(self, name, grades):\n","        self.name = name\n","        self.grades = grades  # grades is a list of numbers\n","\n","    def average_grade(self):\n","        if len(self.grades) == 0:\n","            return 0  # Return 0 if no grades are provided\n","        return sum(self.grades) / len(self.grades)\n","\n","# Testing the Student class\n","student1 = Student(\"Alice\", [90, 85, 88, 92])\n","student2 = Student(\"Bob\", [75, 80, 70, 78])\n","\n","print(f\"{student1.name}'s average grade: {student1.average_grade():.2f}\")  # Output: Alice's average grade: 88.75\n","print(f\"{student2.name}'s average grade: {student2.average_grade():.2f}\")  # Output: Bob's average grade: 75.25"],"metadata":{"id":"Re2LOD02icb6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735927100504,"user_tz":480,"elapsed":476,"user":{"displayName":"Shrishti Gupta","userId":"17842323092412354303"}},"outputId":"dfd99c2c-70e8-4fe4-c227-57e9244f3c8d"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Alice's average grade: 88.75\n","Bob's average grade: 75.75\n"]}]},{"cell_type":"code","source":["#13. Create a class Rectangle with methods set_dimensions() to set the dimensions and area() to calculate the area.\n","class Rectangle:\n","    def __init__(self):\n","        self.length = 0\n","        self.width = 0\n","\n","    # Method to set the dimensions of the rectangle\n","    def set_dimensions(self, length, width):\n","        self.length = length\n","        self.width = width\n","\n","    # Method to calculate the area of the rectangle\n","    def area(self):\n","        return self.length * self.width\n","\n","# Testing the Rectangle class\n","rectangle = Rectangle()\n","\n","# Set dimensions of the rectangle\n","rectangle.set_dimensions(5, 3)\n","\n","# Calculate and print the area of the rectangle\n","print(f\"Area of the rectangle: {rectangle.area()}\")  # Output: Area of the rectangle: 15"],"metadata":{"id":"cJuejp7IiiVR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735927127087,"user_tz":480,"elapsed":462,"user":{"displayName":"Shrishti Gupta","userId":"17842323092412354303"}},"outputId":"788976dd-a9ea-49dd-9576-78f62deaf798"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Area of the rectangle: 15\n"]}]},{"cell_type":"code","source":["#14. Create a class Employee with a method calculate_salary() that computes the salary based on hours worked and hourly rate. Create a derived class Manager that adds a bonus to the salary.\n","class Employee:\n","    def __init__(self, name, hours_worked, hourly_rate):\n","        self.name = name\n","        self.hours_worked = hours_worked\n","        self.hourly_rate = hourly_rate\n","\n","    # Method to calculate the salary based on hours worked and hourly rate\n","    def calculate_salary(self):\n","        return self.hours_worked * self.hourly_rate\n","\n","class Manager(Employee):\n","    def __init__(self, name, hours_worked, hourly_rate, bonus):\n","        super().__init__(name, hours_worked, hourly_rate)\n","        self.bonus = bonus\n","\n","    # Overriding the calculate_salary method to include the bonus\n","    def calculate_salary(self):\n","        base_salary = super().calculate_salary()\n","        return base_salary + self.bonus\n","\n","# Testing the Employee and Manager classes\n","employee = Employee(\"John\", 40, 20)  # 40 hours worked at $20 per hour\n","manager = Manager(\"Alice\", 40, 30, 500)  # 40 hours worked at with a 500 bonus\n","\n","print(f\"{employee.name}'s salary: ${employee.calculate_salary()}\")  # Output: John's salary: $800\n","print(f\"{manager.name}'s salary: ${manager.calculate_salary()}\")  # Output: Alice's salary: $1700"],"metadata":{"id":"KaScG4tHijcw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735927203011,"user_tz":480,"elapsed":488,"user":{"displayName":"Shrishti Gupta","userId":"17842323092412354303"}},"outputId":"161c8eb1-4896-4d21-f39d-b748b4d89743"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["John's salary: $800\n","Alice's salary: $1700\n"]}]},{"cell_type":"code","source":["#15. Create a class Product with attributes name, price, and quantity. Implement a method total_price() that calculates the total price of the product.\n","class Product:\n","    def __init__(self, name, price, quantity):\n","        self.name = name\n","        self.price = price\n","        self.quantity = quantity\n","\n","    # Method to calculate the total price of the product\n","    def total_price(self):\n","        return self.price * self.quantity\n","\n","# Testing the Product class\n","product1 = Product(\"Laptop\", 1000, 3)\n","product2 = Product(\"Smartphone\", 500, 5)\n","\n","# Calculate and print the total price for both products\n","print(f\"Total price of {product1.name}: ${product1.total_price()}\")  # Output: Total price of Laptop: $3000\n","print(f\"Total price of {product2.name}: ${product2.total_price()}\")  # Output: Total price of Smartphone: $2500\n","\n",""],"metadata":{"id":"n-i8EQjOipY6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735927239807,"user_tz":480,"elapsed":454,"user":{"displayName":"Shrishti Gupta","userId":"17842323092412354303"}},"outputId":"c17c1c10-ffd7-4f52-fe51-fd66159b8fba"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Total price of Laptop: $3000\n","Total price of Smartphone: $2500\n"]}]},{"cell_type":"code","source":["#16. Create a class Animal with an abstract method sound(). Create two derived classes Cow and Sheep that implement the sound() method.\n","from abc import ABC, abstractmethod\n","\n","# Abstract base class\n","class Animal(ABC):\n","    @abstractmethod\n","    def sound(self):\n","        pass\n","\n","# Derived class Cow\n","class Cow(Animal):\n","    def sound(self):\n","        print(\"Moo\")\n","\n","# Derived class Sheep\n","class Sheep(Animal):\n","    def sound(self):\n","        print(\"Baa\")\n","\n","# Testing the Animal, Cow, and Sheep classes\n","cow = Cow()\n","sheep = Sheep()\n","\n","cow.sound()   # Output: Moo\n","sheep.sound()  # Output: Baa"],"metadata":{"id":"uRFGOUMgiqIC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735927267194,"user_tz":480,"elapsed":490,"user":{"displayName":"Shrishti Gupta","userId":"17842323092412354303"}},"outputId":"d0c64a54-4e0e-4441-f1d8-fba33b6c1753"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Moo\n","Baa\n"]}]},{"cell_type":"code","source":["#17. Create a class Book with attributes title, author, and year_published. Add a method get_book_info() that returns a formatted string with the book's details.\n","class Book:\n","    def __init__(self, title, author, year_published):\n","        self.title = title\n","        self.author = author\n","        self.year_published = year_published\n","\n","    # Method to get the book's details in a formatted string\n","    def get_book_info(self):\n","        return f\"'{self.title}' by {self.author}, published in {self.year_published}\"\n","\n","# Testing the Book class\n","book1 = Book(\"To Kill a Mockingbird\", \"Harper Lee\", 1960)\n","book2 = Book(\"1984\", \"George Orwell\", 1949)\n","\n","# Get and print the details of the books\n","print(book1.get_book_info())  # Output: 'To Kill a Mockingbird' by Harper Lee, published in 1960\n","print(book2.get_book_info())  # Output: '1984' by George Orwell, published in 1949"],"metadata":{"id":"poHf3A4liv3C","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735927292933,"user_tz":480,"elapsed":436,"user":{"displayName":"Shrishti Gupta","userId":"17842323092412354303"}},"outputId":"b1d2ca1c-2904-41df-d363-f765b6e87c74"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["'To Kill a Mockingbird' by Harper Lee, published in 1960\n","'1984' by George Orwell, published in 1949\n"]}]},{"cell_type":"code","source":["#18. Create a class House with attributes address and price. Create a derived class Mansion that adds an attribute number_of_rooms.\n","# Base class House\n","class House:\n","    def __init__(self, address, price):\n","        self.address = address\n","        self.price = price\n","\n","    def get_info(self):\n","        return f\"Address: {self.address}, Price: ${self.price}\"\n","\n","# Derived class Mansion\n","class Mansion(House):\n","    def __init__(self, address, price, number_of_rooms):\n","        # Call the constructor of the base class\n","        super().__init__(address, price)\n","        self.number_of_rooms = number_of_rooms\n","\n","    def get_mansion_info(self):\n","        # Get the base class info and add mansion-specific details\n","        base_info = super().get_info()\n","        return f\"{base_info}, Number of Rooms: {self.number_of_rooms}\"\n","\n","# Testing the House and Mansion classes\n","house = House(\"1234 Elm St\", 250000)\n","mansion = Mansion(\"5678 Oak Ave\", 1500000, 10)\n","\n","# Get and print the information for both the house and the mansion\n","print(house.get_info())  # Output: Address: 1234 Elm St, Price: $250000\n","print(mansion.get_mansion_info())  # Output: Address: 5678 Oak Ave, Price: $1500000, Number of Rooms: 10"],"metadata":{"id":"ROjUuw0viwj7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735927323662,"user_tz":480,"elapsed":451,"user":{"displayName":"Shrishti Gupta","userId":"17842323092412354303"}},"outputId":"faed9d90-25af-4053-8b8b-db3c2a3cab19"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Address: 1234 Elm St, Price: $250000\n","Address: 5678 Oak Ave, Price: $1500000, Number of Rooms: 10\n"]}]}]}